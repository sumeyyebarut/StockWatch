// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockWatch.Data;

#nullable disable

namespace StockWatch.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("StockWatch.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedByUserId" }, "CreatedByUserId");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique();

                    b.HasIndex(new[] { "UpdatedByUserId" }, "UpdatedByUserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("StockWatch.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CriticalStockLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Barcode" }, "Barcode")
                        .IsUnique();

                    b.HasIndex(new[] { "CategoryId" }, "CategoryId");

                    b.HasIndex(new[] { "CreatedByUserId" }, "CreatedByUserId")
                        .HasDatabaseName("CreatedByUserId1");

                    b.HasIndex(new[] { "UpdatedByUserId" }, "UpdatedByUserId")
                        .HasDatabaseName("UpdatedByUserId1");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StockWatch.Models.StockMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasColumnType("enum('IN','OUT')");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedByUserId" }, "CreatedByUserId")
                        .HasDatabaseName("CreatedByUserId2");

                    b.HasIndex(new[] { "ProductId" }, "ProductId");

                    b.HasIndex(new[] { "UpdatedByUserId" }, "UpdatedByUserId")
                        .HasDatabaseName("UpdatedByUserId2");

                    b.HasIndex(new[] { "WarehouseId" }, "WarehouseId");

                    b.ToTable("StockMovements");
                });

            modelBuilder.Entity("StockWatch.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StockWatch.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedByUserId" }, "CreatedByUserId")
                        .HasDatabaseName("CreatedByUserId3");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique()
                        .HasDatabaseName("Name1");

                    b.HasIndex(new[] { "UpdatedByUserId" }, "UpdatedByUserId")
                        .HasDatabaseName("UpdatedByUserId3");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("StockWatch.Models.Category", b =>
                {
                    b.HasOne("StockWatch.Models.User", "CreatedByUser")
                        .WithMany("CategoryCreatedByUsers")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("categories_ibfk_1");

                    b.HasOne("StockWatch.Models.User", "UpdatedByUser")
                        .WithMany("CategoryUpdatedByUsers")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("categories_ibfk_2");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("StockWatch.Models.Product", b =>
                {
                    b.HasOne("StockWatch.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("products_ibfk_1");

                    b.HasOne("StockWatch.Models.User", "CreatedByUser")
                        .WithMany("ProductCreatedByUsers")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("products_ibfk_2");

                    b.HasOne("StockWatch.Models.User", "UpdatedByUser")
                        .WithMany("ProductUpdatedByUsers")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("products_ibfk_3");

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("StockWatch.Models.StockMovement", b =>
                {
                    b.HasOne("StockWatch.Models.User", "CreatedByUser")
                        .WithMany("StockMovementCreatedByUsers")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockWatch.Models.Product", "Product")
                        .WithMany("StockMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stockmovements_ibfk_1");

                    b.HasOne("StockWatch.Models.User", "UpdatedByUser")
                        .WithMany("StockMovementUpdatedByUsers")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stockmovements_ibfk_4");

                    b.HasOne("StockWatch.Models.Warehouse", "Warehouse")
                        .WithMany("StockMovements")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stockmovements_ibfk_2");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Product");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("StockWatch.Models.Warehouse", b =>
                {
                    b.HasOne("StockWatch.Models.User", "CreatedByUser")
                        .WithMany("WarehouseCreatedByUsers")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("warehouses_ibfk_1");

                    b.HasOne("StockWatch.Models.User", "UpdatedByUser")
                        .WithMany("WarehouseUpdatedByUsers")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("warehouses_ibfk_2");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("StockWatch.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("StockWatch.Models.Product", b =>
                {
                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("StockWatch.Models.User", b =>
                {
                    b.Navigation("CategoryCreatedByUsers");

                    b.Navigation("CategoryUpdatedByUsers");

                    b.Navigation("ProductCreatedByUsers");

                    b.Navigation("ProductUpdatedByUsers");

                    b.Navigation("StockMovementCreatedByUsers");

                    b.Navigation("StockMovementUpdatedByUsers");

                    b.Navigation("WarehouseCreatedByUsers");

                    b.Navigation("WarehouseUpdatedByUsers");
                });

            modelBuilder.Entity("StockWatch.Models.Warehouse", b =>
                {
                    b.Navigation("StockMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
